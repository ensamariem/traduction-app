import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Globe, ChevronLeft, QrCode, ArrowRight, Radio, Headphones, Volume2, Play, Pause, Clock, 
  FastForward, Rewind, QrCodeScan, X, Users, Video, MessageSquare, Camera, AlertTriangle, MicOff, VideoOff } from 'lucide-react';
import { Link, useNavigate, useParams } from 'react-router-dom';
import { motion } from 'framer-motion';
import axios from 'axios';
import jsQR from 'jsqr';

const ConferenceJoinScreen = () => {
  const navigate = useNavigate();
  const { conferenceId: urlConferenceId } = useParams();
  const [step, setStep] = useState(1);
  const [conferenceId, setConferenceId] = useState(urlConferenceId || '');
  const [conferenceInfo, setConferenceInfo] = useState(null);
  const [selectedLanguage, setSelectedLanguage] = useState('');
  const [userName, setUserName] = useState('');
  const [availableLanguages, setAvailableLanguages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [joined, setJoined] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [showQrScanner, setShowQrScanner] = useState(false);
  const [showParticipantsModal, setShowParticipantsModal] = useState(false);
  const [showChat, setShowChat] = useState(false);
  const [showConferenceSummary, setShowConferenceSummary] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [audioLevel, setAudioLevel] = useState(0);
  const [videoEnabled, setVideoEnabled] = useState(false);
  const [audioEnabled, setAudioEnabled] = useState(true); // √âtat du micro du pr√©sentateur
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [participantsList, setParticipantsList] = useState([]);
  const [conferenceSummary, setConferenceSummary] = useState('');
  const [error, setError] = useState('');
  const [participantId, setParticipantId] = useState('');
  const [showEndedAlert, setShowEndedAlert] = useState(false);
  const [endedMessage, setEndedMessage] = useState('');
  const [isBuffering, setIsBuffering] = useState(false);
  const [videoReceived, setVideoReceived] = useState(false);
  const [timelineMode, setTimelineMode] = useState('live'); // 'live' ou 'replay'
  const [maxLiveTime, setMaxLiveTime] = useState(0); // Dur√©e maximale disponible (temps en direct)
  const [videoDisabledByPresenter, setVideoDisabledByPresenter] = useState(false); // La cam√©ra est d√©sactiv√©e par le pr√©sentateur
  
  // Refs WebRTC
  const peerConnectionRef = useRef(null);
  const remoteStreamRef = useRef(null);
  const mediaSourceRef = useRef(null);
  const sourceBufferRef = useRef(null);
  const mediaBufferRef = useRef([]);
  const mediaSegmentsRef = useRef([]);
  const currentSegmentIndexRef = useRef(0);
  
  const videoRef = useRef(null);
  const presenterVideoRef = useRef(null);
  const audioRef = useRef(null);
  const wsRef = useRef(null);
  const chatEndRef = useRef(null);
  const audioLevelIntervalRef = useRef(null);
  const timeUpdateIntervalRef = useRef(null);
  const liveTimerRef = useRef(null);
  
  const API_BASE_URL = "http://localhost:8000/api";
  
  // Configuration WebRTC
  const rtcConfig = {
    iceServers: [
      { urls: 'stun:stun.l.google.com:19302' },
      { urls: 'stun:stun1.l.google.com:19302' },
      { urls: 'stun:stun2.l.google.com:19302' },
    ]
  };
  
  // D√©finir une fonction de callback stable pour la r√©f√©rence vid√©o
  const setPresenterVideoRef = useCallback(node => {
    if (node !== null) {
      presenterVideoRef.current = node;
      console.log("üîµ R√©f√©rence vid√©o stable d√©finie avec succ√®s");
      
      // Si on a d√©j√† un flux distant, l'assigner imm√©diatement √† l'√©l√©ment vid√©o
      if (remoteStreamRef.current && joined) {
        console.log("üîµ Assignation du flux au nouvel √©l√©ment vid√©o");
        node.srcObject = remoteStreamRef.current;
        
        // Essayer de d√©marrer la lecture si on est en mode play
        if (isPlaying) {
          node.play().catch(err => {
            console.warn("Impossible de d√©marrer automatiquement la vid√©o:", err);
          });
        }
      }
    }
  }, [joined, isPlaying]);
  
  // Charger les langues et infos conf√©rence si ID disponible
  useEffect(() => {
    if (urlConferenceId) {
      setConferenceId(urlConferenceId);
      checkConference(urlConferenceId);
    }
    
    // G√©n√©rer un ID unique pour ce participant
    setParticipantId(`user-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`);
    
    // G√©n√©rer un nom par d√©faut
    setUserName(`Participant ${Math.floor(Math.random() * 1000)}`);
    
    // Cleanup
    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
      if (audioLevelIntervalRef.current) {
        clearInterval(audioLevelIntervalRef.current);
      }
      if (timeUpdateIntervalRef.current) {
        clearInterval(timeUpdateIntervalRef.current);
      }
      if (liveTimerRef.current) {
        clearInterval(liveTimerRef.current);
      }
      if (peerConnectionRef.current) {
        peerConnectionRef.current.close();
      }
      // Lib√©rer les ressources MediaSource
      if (mediaBufferRef.current.length > 0) {
        mediaBufferRef.current.forEach(item => {
          if (item.url) URL.revokeObjectURL(item.url);
        });
      }
    };
  }, [urlConferenceId]);
  
  // Faire d√©filer le chat vers le bas lorsque de nouveaux messages arrivent
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);
  
  // Mettre √† jour le temps de lecture actuel
  useEffect(() => {
    // Nettoyage de l'intervalle pr√©c√©dent si n√©cessaire
    if (timeUpdateIntervalRef.current) {
      clearInterval(timeUpdateIntervalRef.current);
      timeUpdateIntervalRef.current = null;
    }
  
    // Ne cr√©er l'intervalle que si les conditions sont remplies
    if (joined && isPlaying && presenterVideoRef.current) {
      timeUpdateIntervalRef.current = setInterval(() => {
        // V√©rifier √† nouveau que la r√©f√©rence existe toujours
        if (presenterVideoRef.current) {
          const videoElement = presenterVideoRef.current;
          
          // V√©rifier que la vid√©o est r√©ellement en cours de lecture pour √©viter des incoh√©rences
          if (!videoElement.paused && videoElement.readyState >= 2) {
            setCurrentTime(videoElement.currentTime);
            
            // Si la vid√©o a une dur√©e valide, la mettre √† jour
            if (videoElement.duration && !isNaN(videoElement.duration)) {
              setDuration(videoElement.duration);
            }
          }
        }
      }, 500);
    }
    
    // Nettoyage √† la d√©sactivation du composant
    return () => {
      if (timeUpdateIntervalRef.current) {
        clearInterval(timeUpdateIntervalRef.current);
        timeUpdateIntervalRef.current = null;
      }
    };
  }, [joined, isPlaying]);
  
  // Mettre √† jour le temps maximal disponible (en direct)
  useEffect(() => {
    if (joined && timelineMode === 'live') {
      liveTimerRef.current = setInterval(() => {
        setMaxLiveTime(prev => prev + 0.5);
      }, 500);
    } else if (liveTimerRef.current) {
      clearInterval(liveTimerRef.current);
    }
    
    return () => {
      if (liveTimerRef.current) {
        clearInterval(liveTimerRef.current);
      }
    };
  }, [joined, timelineMode]);
  
  // Surveiller les changements dans le flux distant
  useEffect(() => {
    if (remoteStreamRef.current && presenterVideoRef.current && joined && remoteStreamRef.current.getTracks().length > 0) {
      console.log("üîÑ Flux distant modifi√©, mise √† jour de l'√©l√©ment vid√©o");
      console.log("üîÑ Nombre de pistes dans le flux:", remoteStreamRef.current.getTracks().length);
      console.log("üîÑ Types de pistes:", remoteStreamRef.current.getTracks().map(t => t.kind).join(", "));
      
      presenterVideoRef.current.srcObject = remoteStreamRef.current;
      
      // V√©rifier si nous avons au moins une piste vid√©o
      const hasPictureTrack = remoteStreamRef.current.getVideoTracks().length > 0;
      setVideoReceived(hasPictureTrack);
      
      // Ne pas changer l'√©tat de videoEnabled si d√©sactiv√© par le pr√©sentateur
      if (!videoDisabledByPresenter) {
        setVideoEnabled(hasPictureTrack);
      }
      console.log(`üîÑ Vid√©o ${hasPictureTrack ? 'disponible' : 'non disponible'} selon les pistes re√ßues`);
      
      // Essayer de lancer la lecture si en mode play
      if (isPlaying) {
        presenterVideoRef.current.play().catch(e => {
          console.warn("Echec de lecture automatique:", e);
        });
      }
    }
  }, [remoteStreamRef.current, joined, isPlaying, videoDisabledByPresenter]);
  
  // Fonction pour v√©rifier la validit√© de la conf√©rence
  const checkConference = async (id) => {
    setIsLoading(true);
    setError('');
    
    try {
      // Appel API pour v√©rifier la conf√©rence
      const response = await axios.get(`${API_BASE_URL}/conferences/${id}`);
      
      if (response.data && response.data.success) {
        const conference = response.data.conference;
        
        // V√©rifier si la conf√©rence est active
        if (conference.status !== 'active') {
          setError("Cette conf√©rence n'est pas active ou a √©t√© termin√©e.");
          setIsLoading(false);
          return;
        }
        
        setConferenceInfo(conference);
        setAvailableLanguages(conference.targetLanguages);
        setStep(2);
      } else {
        setError("La conf√©rence n'a pas √©t√© trouv√©e. Veuillez v√©rifier l'identifiant.");
      }
    } catch (error) {
      console.error("Erreur lors de la v√©rification de la conf√©rence:", error);
      setError("La conf√©rence n'a pas √©t√© trouv√©e. Veuillez v√©rifier l'identifiant.");
    } finally {
      setIsLoading(false);
    }
  };
  
  // Initialiser WebRTC
  const initializeWebRTC = async () => {
    try {
      console.log("üîµ Initialisation de WebRTC...");
      
      // Cr√©er un nouveau flux distant
      remoteStreamRef.current = new MediaStream();
      console.log("üîµ MediaStream distant cr√©√©");
      
      // Cr√©er la connexion RTCPeerConnection
      const peerConnection = new RTCPeerConnection(rtcConfig);
      peerConnectionRef.current = peerConnection;
      console.log("üîµ RTCPeerConnection cr√©√©e avec config:", rtcConfig);
      
      // Configurer l'affichage de la vid√©o si l'√©l√©ment existe d√©j√†
      if (presenterVideoRef.current) {
        console.log("üîµ Flux distant assign√© √† l'√©l√©ment video");
        presenterVideoRef.current.srcObject = remoteStreamRef.current;
      } else {
        console.log("‚ö†Ô∏è R√©f√©rence √† l'√©l√©ment video non disponible lors de l'initialisation");
      }
      
      // √âcouter les pistes re√ßues
      peerConnection.ontrack = (event) => {
        console.log("üü¢ Piste re√ßue!");
        console.log("üü¢ Type de piste:", event.track.kind);
        console.log("üü¢ ID de piste:", event.track.id);
        console.log("üü¢ √âtat de la piste:", event.track.readyState);
        
        // Ajouter directement la piste au flux distant
        remoteStreamRef.current.addTrack(event.track);
        console.log(`üü¢ Piste ${event.track.kind} ajout√©e au flux distant`);
        
        // Activer la vid√©o si c'est une piste vid√©o
        if (event.track.kind === 'video') {
          setVideoReceived(true);
          
          // Ne pas changer l'√©tat de videoEnabled si d√©sactiv√© par le pr√©sentateur
          if (!videoDisabledByPresenter) {
            setVideoEnabled(true);
          }
          console.log("üü¢ Piste vid√©o d√©tect√©e et activ√©e");
        }
        
        // S'assurer que l'√©l√©ment vid√©o utilise le flux mis √† jour
        if (presenterVideoRef.current) {
          presenterVideoRef.current.srcObject = remoteStreamRef.current;
          console.log("üü¢ Flux mis √† jour assign√© √† l'√©l√©ment vid√©o");
          
          // Tenter de d√©marrer la lecture
          if (isPlaying) {
            presenterVideoRef.current.play().catch(error => {
              console.warn("Impossible de d√©marrer automatiquement la vid√©o:", error);
            });
          }
        }
        
        // Surveiller les changements d'√©tat de la piste
        event.track.onmute = () => {
          console.log(`‚ö†Ô∏è Piste ${event.track.kind} muette`);
        };
        
        event.track.onunmute = () => {
          console.log(`üü¢ Piste ${event.track.kind} active`);
        };
        
        event.track.onended = () => {
          console.log(`‚ö†Ô∏è Piste ${event.track.kind} termin√©e`);
        };
      };
      
      // G√©rer les candidats ICE g√©n√©r√©s localement
      peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
          console.log("üîµ Candidat ICE g√©n√©r√©:", event.candidate.type);
          
          try {
            if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
              wsRef.current.send(JSON.stringify({
                type: 'ice_candidate',
                data: {
                  sender_id: participantId,
                  candidate: event.candidate.toJSON()
                }
              }));
              console.log("üîµ Candidat ICE envoy√© au serveur");
            } else {
              console.warn("‚ö†Ô∏è WebSocket non disponible pour envoyer le candidat ICE");
            }
          } catch (error) {
            console.error("‚ùå Erreur lors de l'envoi du candidat ICE:", error);
          }
        }
      };
      
      // √âcouter les changements d'√©tat de connexion
      peerConnection.onconnectionstatechange = () => {
        console.log("üîµ √âtat de connexion WebRTC:", peerConnection.connectionState);
        if (peerConnection.connectionState === 'connected') {
          console.log("üü¢ Connexion WebRTC √©tablie avec succ√®s!");
        } else if (peerConnection.connectionState === 'disconnected') {
          console.error("‚ùå Connexion WebRTC perdue");
        } else if (peerConnection.connectionState === 'failed') {
          console.error("‚ùå Connexion WebRTC √©chou√©e");
        }
      };
      
      // √âcouter l'√©tat de n√©gociation
      peerConnection.onnegotiationneeded = () => {
        console.log("üîµ N√©gociation WebRTC n√©cessaire");
      };
      
      // √âcouter les changements d'√©tat de connexion ICE
      peerConnection.oniceconnectionstatechange = () => {
        console.log("üîµ √âtat de connexion ICE:", peerConnection.iceConnectionState);
        
        // Si la connexion ICE est √©tablie mais que nous n'avons pas encore re√ßu de vid√©o
        if (peerConnection.iceConnectionState === 'connected' && !videoReceived) {
          console.log("üîµ Connexion ICE √©tablie, en attente de flux vid√©o...");
        }
      };
      
      console.log("üîµ WebRTC initialis√© et pr√™t √† recevoir l'offre");
      return true;
      
    } catch (error) {
      console.error("‚ùå Erreur lors de l'initialisation WebRTC:", error);
      setError("Impossible d'initialiser la connexion vid√©o. Veuillez r√©essayer.");
      return false;
    }
  };
  
  // Fonction pour rejoindre la conf√©rence
  const joinConference = async () => {
    if (!selectedLanguage) {
      alert("Veuillez s√©lectionner une langue d'√©coute");
      return;
    }
    
    if (!userName.trim()) {
      alert("Veuillez entrer votre nom");
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Initialiser WebRTC d'abord
      const rtcInitialized = await initializeWebRTC();
      if (!rtcInitialized) {
        throw new Error("√âchec de l'initialisation WebRTC");
      }
      
      // √âtablir une connexion WebSocket
      const ws = new WebSocket(`ws://localhost:8000/ws/conference/${conferenceId}`);
      
      ws.onopen = () => {
        console.log("üü¢ WebSocket ouverte, envoi des informations du participant");
        // Envoyer les informations du participant
        ws.send(JSON.stringify({
          participant_id: participantId,
          name: userName,
          language: selectedLanguage,
          is_presenter: false
        }));
      };
      
      ws.onmessage = async (event) => {
        const message = JSON.parse(event.data);
        console.log("üîµ Message WebSocket re√ßu:", message.type);
        
        switch(message.type) {
          case 'connection_success':
            console.log("üü¢ Connexion WebSocket √©tablie avec succ√®s");
            break;
            
          case 'conference_inactive':
            setError(message.data.message);
            setIsLoading(false);
            ws.close();
            return;
          
          case 'webrtc_offer':
            // Recevoir l'offre du pr√©sentateur et y r√©pondre
            try {
              console.log("üü¢ Offre WebRTC re√ßue:", message.data);
              
              if (peerConnectionRef.current) {
                const { type, sdp, hasVideo, hasAudio } = message.data;
                
                // Mettre √† jour les √©tats de cam√©ra et micro selon l'offre
                if (hasVideo !== undefined) {
                  setVideoEnabled(hasVideo);
                  setVideoDisabledByPresenter(!hasVideo);
                }
                
                if (hasAudio !== undefined) {
                  setAudioEnabled(hasAudio);
                }
                
                // Ne traiter l'offre que si elle est pour tous ou sp√©cifiquement pour ce participant
                if (!message.data.target_id || message.data.target_id === participantId) {
                  console.log("üü¢ Traitement de l'offre WebRTC");
                  
                  // Cr√©er la description √† partir de l'offre
                  const offerDescription = new RTCSessionDescription({ type, sdp });
                  console.log("üü¢ RTCSessionDescription cr√©√©e");
                  
                  // Appliquer l'offre √† la connexion
                  console.log("üü¢ Tentative d'application de l'offre distante");
                  await peerConnectionRef.current.setRemoteDescription(offerDescription);
                  console.log("üü¢ Offre distante appliqu√©e avec succ√®s");
                  
                  // Cr√©er une r√©ponse
                  console.log("üü¢ Cr√©ation de la r√©ponse");
                  const answer = await peerConnectionRef.current.createAnswer();
                  console.log("üü¢ R√©ponse cr√©√©e:", answer.type);
                  
                  // D√©finir la description locale
                  console.log("üü¢ Application de la description locale");
                  await peerConnectionRef.current.setLocalDescription(answer);
                  console.log("üü¢ Description locale appliqu√©e");
                  
                  // Envoyer la r√©ponse au pr√©sentateur avec l'identifiant
                  ws.send(JSON.stringify({
                    type: 'webrtc_answer',
                    data: {
                      type: answer.type,
                      sdp: answer.sdp,
                      sender_id: participantId
                    }
                  }));
                  
                  console.log("üü¢ R√©ponse WebRTC envoy√©e au pr√©sentateur");
                } else {
                  console.log("‚ö†Ô∏è Offre ignor√©e car destin√©e √† un autre participant");
                }
              } else {
                console.error("‚ùå Peer connection non disponible pour traiter l'offre");
              }
            } catch (e) {
              console.error("‚ùå Erreur lors du traitement de l'offre WebRTC:", e);
            }
            break;
          
          case 'ice_candidate':
            // Traiter les candidats ICE du pr√©sentateur
            if (message.data && message.data.sender_id === 'presenter') {
              console.log("üîµ Candidat ICE re√ßu du pr√©sentateur");
              
              if (peerConnectionRef.current) {
                try {
                  console.log("üîµ Tentative d'ajout du candidat ICE");
                  await peerConnectionRef.current.addIceCandidate(
                    new RTCIceCandidate(message.data.candidate)
                  );
                  console.log("üîµ Candidat ICE ajout√© avec succ√®s");
                } catch (e) {
                  console.error("‚ùå Erreur lors de l'ajout d'un candidat ICE:", e);
                }
              } else {
                console.error("‚ùå Peer connection non disponible pour ajouter le candidat ICE");
              }
            }
            break;
          
          case 'media_chunk':
            // Recevoir les segments m√©dia pour la navigation temporelle
            if (message.data) {
              const { timestamp, duration, chunk_id } = message.data;
              
              // Ajouter au registre des segments
              mediaSegmentsRef.current.push({
                id: chunk_id,
                timestamp,
                duration,
                position: mediaSegmentsRef.current.length
              });
              
              // Limiter la taille du buffer (15 minutes = 900 segments de 1 seconde)
              if (mediaSegmentsRef.current.length > 900) {
                mediaSegmentsRef.current.shift();
              }
              
              // Mettre √† jour la dur√©e maximale disponible
              setMaxLiveTime(prev => Math.max(prev, mediaSegmentsRef.current.length));
            }
            break;
            
          case 'participants_list':
            if (message.data && message.data.participants) {
              setParticipantsList(message.data.participants);
            }
            break;
            
          case 'chat_message':
            if (message.data) {
              setMessages(prev => [...prev, message.data]);
            }
            break;
            
          case 'participant_joined':
            // Mettre √† jour la liste des participants
            if (message.data) {
              setParticipantsList(prev => {
                // V√©rifier si le participant existe d√©j√†
                const exists = prev.some(p => p.id === message.data.participant_id);
                if (!exists) {
                  return [...prev, {
                    id: message.data.participant_id,
                    name: message.data.name,
                    language: message.data.language,
                    joinTime: message.data.joinTime,
                    isPresenter: message.data.is_presenter
                  }];
                }
                return prev;
              });
            }
            break;
            
          case 'participant_left':
            // Retirer le participant de la liste
            if (message.data && message.data.participant_id) {
              setParticipantsList(prev => prev.filter(p => p.id !== message.data.participant_id));
            }
            break;
            
          case 'translated_audio':
            // Traiter les donn√©es audio traduites
            setAudioLevel(Math.random() * 0.8);
            break;
            
          case 'device_state_change':
            // G√©rer les changements d'√©tat des p√©riph√©riques du pr√©sentateur
            if (message.data) {
              const { deviceType, enabled } = message.data;
              
              if (deviceType === 'video') {
                setVideoEnabled(enabled);
                setVideoDisabledByPresenter(!enabled);
                console.log(`üîµ √âtat de la cam√©ra du pr√©sentateur mis √† jour: ${enabled ? 'activ√©e' : 'd√©sactiv√©e'}`);
              } else if (deviceType === 'audio') {
                setAudioEnabled(enabled);
                console.log(`üîµ √âtat du microphone du pr√©sentateur mis √† jour: ${enabled ? 'activ√©' : 'd√©sactiv√©'}`);
              }
            }
            break;
            
          case 'media_segment_available':
            // Traiter la disponibilit√© d'un segment m√©dia pour la navigation temporelle
            if (message.data && message.data.target_id === participantId) {
              // Dans un cas r√©el, t√©l√©charger le segment pour la navigation temporelle
              console.log(`üîµ Segment m√©dia disponible: ${message.data.timestamp}`);
              
              // Simuler le t√©l√©chargement du segment pour la d√©mo
              const simulatedSegment = {
                timestamp: message.data.timestamp,
                index: message.data.index,
                downloaded: true
              };
              
              // Ajouter le segment au buffer local
              mediaBufferRef.current.push(simulatedSegment);
            }
            break;
            
          case 'conference_ended':
            // Afficher une alerte persistante indiquant que la conf√©rence est termin√©e
            setEndedMessage(message.data.message || "La conf√©rence a √©t√© termin√©e par l'organisateur.");
            setShowEndedAlert(true);
            setIsPlaying(false);
            
            // Fermer la connexion WebRTC
            if (peerConnectionRef.current) {
              peerConnectionRef.current.close();
              peerConnectionRef.current = null;
            }
            break;
        }
      };
      
      ws.onerror = (error) => {
        console.error("Erreur WebSocket:", error);
      };
      
      ws.onclose = () => {
        if (joined) {
          // Ne pas afficher d'alerte automatique car l'arr√™t de la conf√©rence est g√©r√© par le message 'conference_ended'
        }
      };
      
      wsRef.current = ws;
      
      // Simuler des niveaux audio pour la d√©mo
      audioLevelIntervalRef.current = setInterval(() => {
        setAudioLevel(Math.random() * 0.8);
      }, 100);
      
      // Simuler des donn√©es de conf√©rence pour la d√©mo
      setDuration(60 * 15); // 15 minutes de dur√©e totale
      setCurrentTime(60 * 3); // 3 minutes d√©j√† √©coul√©es
      setMaxLiveTime(60 * 3); // 3 minutes d√©j√† disponibles
      
      // G√©n√©rer un r√©sum√© de conf√©rence
      try {
        const summaryResponse = await axios.post(`${API_BASE_URL}/conferences/${conferenceId}/summary`);
        if (summaryResponse.data && summaryResponse.data.success) {
          setConferenceSummary(summaryResponse.data.summary);
        }
      } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration du r√©sum√©:", error);
        
        // En cas d'erreur, g√©n√©rer un r√©sum√© local
        setConferenceSummary(`R√©sum√© de la conf√©rence "${conferenceInfo?.title}"
        
Points cl√©s abord√©s:
- Introduction au march√© financier marocain
- Perspectives √©conomiques pour 2025
- Nouvelles r√©gulations bancaires et leur impact
- Opportunit√©s d'investissement dans le secteur des technologies
- Strat√©gies pour les investisseurs individuels

Cette conf√©rence a mis en lumi√®re les d√©fis et opportunit√©s du secteur financier marocain, avec un accent particulier sur les innovations technologiques qui transforment le paysage bancaire. Les intervenants ont soulign√© l'importance d'une approche prudente mais proactive face aux changements r√©glementaires √† venir.`);
      }
      
      // Activer la vid√©o si disponible
      if (conferenceInfo?.hasVideo) {
        setVideoEnabled(true);
      }
      
      setJoined(true);
      setIsPlaying(true);
      setTimelineMode('live');
    } catch (error) {
      console.error("Erreur lors de la connexion √† la conf√©rence:", error);
      setError("Impossible de rejoindre la conf√©rence. Veuillez r√©essayer.");
    } finally {
      setIsLoading(false);
    }
  };
  
  // Fonction pour d√©marrer/pauser la lecture
  const togglePlayback = () => {
    if (presenterVideoRef.current) {
      if (isPlaying) {
        // Mettre en pause d'abord
        presenterVideoRef.current.pause();
        // Puis changer l'√©tat
        setIsPlaying(false);
      } else {
        // D√©marrer la lecture avec promise
        presenterVideoRef.current.play()
          .then(() => {
            // Changement d'√©tat apr√®s la lecture r√©ussie
            setIsPlaying(true);
          })
          .catch(error => {
            console.error("‚ùå Erreur de lecture vid√©o:", error);
            // Remettre l'√©tat √† false en cas d'√©chec
            setIsPlaying(false);
          });
      }
    } else {
      // Si pas d'√©l√©ment vid√©o, juste inverser l'√©tat
      setIsPlaying(!isPlaying);
    }
  };
  
  // Fonction pour basculer entre lecture en direct et replay
  const toggleTimelineMode = () => {
    if (timelineMode === 'live') {
      setTimelineMode('replay');
      // Si en replay, s'assurer que la lecture est active
      if (!isPlaying) {
        togglePlayback();
      }
    } else {
      setTimelineMode('live');
      // Revenir au temps actuel (maximum)
      if (presenterVideoRef.current) {
        presenterVideoRef.current.currentTime = maxLiveTime;
      }
      setCurrentTime(maxLiveTime);
    }
  };
  
  // Fonction pour avancer/reculer de 10 secondes
  const seekAudio = (seconds) => {
    if (presenterVideoRef.current) {
      let newTime = presenterVideoRef.current.currentTime + seconds;
      
      // Limiter la navigation selon le mode
      if (timelineMode === 'replay') {
        // En mode replay, limiter √† maxLiveTime
        if (newTime > maxLiveTime) {
          newTime = maxLiveTime;
        }
      } else {
        // En mode live, on ne peut pas avancer au-del√† du temps actuel
        newTime = Math.min(newTime, maxLiveTime);
      }
      
      // Emp√™cher de revenir en arri√®re avant le d√©but
      if (newTime < 0) {
        newTime = 0;
      }
      
      presenterVideoRef.current.currentTime = newTime;
      setCurrentTime(newTime);
      
      // Si on est en replay et qu'on avance jusqu'au temps actuel, repasser en live
      if (Math.abs(newTime - maxLiveTime) < 1 && timelineMode === 'replay') {
        setTimelineMode('live');
      }
    } else {
      // Pour la d√©mo, mettons √† jour directement currentTime
      setCurrentTime(prev => {
        let newTime = prev + seconds;
        
        // Limiter selon le mode
        if (timelineMode === 'replay') {
          if (newTime > maxLiveTime) {
            newTime = maxLiveTime;
          }
        } else {
          newTime = Math.min(newTime, maxLiveTime);
        }
        
        if (newTime < 0) {
          newTime = 0;
        }
        
        // Si on est en replay et qu'on avance jusqu'au temps actuel, repasser en live
        if (Math.abs(newTime - maxLiveTime) < 1 && timelineMode === 'replay') {
          setTimelineMode('live');
        }
        
        return newTime;
      });
    }
  };
  
  // Fonction pour mettre √† jour le curseur de lecture
  const handleSeek = (e) => {
    const percent = e.target.value / 100;
    let newTime;
    
    if (timelineMode === 'replay') {
      // En mode replay, la dur√©e maximale est maxLiveTime
      newTime = percent * maxLiveTime;
    } else {
      // En mode live, on est toujours au temps maximum
      newTime = maxLiveTime;
    }
    
    if (presenterVideoRef.current) {
      presenterVideoRef.current.currentTime = newTime;
    }
    
    setCurrentTime(newTime);
    
    // Si on est pr√®s du temps maximal, basculer en mode live
    if (Math.abs(newTime - maxLiveTime) < 1 && timelineMode === 'replay') {
      setTimelineMode('live');
    } else if (newTime < maxLiveTime && timelineMode === 'live') {
      setTimelineMode('replay');
    }
  };
  
  // Envoyer un message dans le chat
  const sendMessage = () => {
    if (!newMessage.trim()) return;
    
    try {
      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
        wsRef.current.send(JSON.stringify({
          type: 'chat_message',
          text: newMessage
        }));
        
        // Note: le message sera ajout√© √† l'UI quand il sera re√ßu via WebSocket
      }
    } catch (error) {
      console.error("Erreur lors de l'envoi du message:", error);
      
      // Fallback pour la d√©mo
      const message = {
        id: `msg-${Date.now()}`,
        senderId: participantId,
        senderName: userName,
        text: newMessage,
        originalLanguage: selectedLanguage,
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, message]);
    }
    
    setNewMessage('');
  };
  
  // Fonction pour scanner le QR code
  const startQrScanner = () => {
    setShowQrScanner(true);
    
    // Acc√©der √† la cam√©ra
    navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })
      .then(stream => {
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
          videoRef.current.play();
          
          // Cr√©er un canvas pour analyser les images de la cam√©ra
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          const scanInterval = setInterval(() => {
            if (videoRef.current && videoRef.current.readyState === videoRef.current.HAVE_ENOUGH_DATA) {
              // D√©finir la taille du canvas pour correspondre √† la vid√©o
              canvas.height = videoRef.current.videoHeight;
              canvas.width = videoRef.current.videoWidth;
              
              // Dessiner l'image actuelle de la vid√©o sur le canvas
              context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);
              
              // Obtenir les donn√©es d'image
              const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
              
              // Analyser l'image pour trouver un QR code
              const code = jsQR(imageData.data, imageData.width, imageData.height, {
                inversionAttempts: "dontInvert",
              });
              
              // Si un QR code est d√©tect√©
              if (code) {
                // Arr√™ter le scan
                clearInterval(scanInterval);
                stopQrScanner();
                
                // Extraire l'ID de conf√©rence du QR code
                const scannedURL = code.data;
                let scannedId = scannedURL;
                
                // Si c'est une URL compl√®te, extraire juste l'ID
                if (scannedURL.includes('/conference/join/')) {
                  scannedId = scannedURL.split('/conference/join/')[1];
                }
                
                // D√©finir l'ID et v√©rifier la conf√©rence
                setConferenceId(scannedId);
                checkConference(scannedId);
              }
            }
          }, 500); // V√©rifier toutes les 500ms
          
          // Nettoyer l'intervalle quand le scanner est ferm√©
          const cleanup = () => {
            clearInterval(scanInterval);
          };
          
          // Stocker la fonction de nettoyage
          return cleanup;
        }
      })
      .catch(err => {
        console.error("Erreur lors de l'acc√®s √† la cam√©ra:", err);
        setShowQrScanner(false);
        setError("Impossible d'acc√©der √† la cam√©ra. Veuillez saisir l'identifiant manuellement.");
      });
  };
  
  // Fonction pour arr√™ter le scanner de QR code
  const stopQrScanner = () => {
    setShowQrScanner(false);
    
    if (videoRef.current && videoRef.current.srcObject) {
      videoRef.current.srcObject.getTracks().forEach(track => track.stop());
    }
  };
  
  // Formater le temps en MM:SS
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };
  
  // G√©n√©rer les barres de visualisation audio
  const generateWaveform = () => {
    return Array(15).fill(0).map((_, i) => {
      const height = joined && isPlaying && audioEnabled
        ? Math.min(16, Math.max(3, Math.floor(Math.sin(i/2 + Date.now()/200) * 8 * audioLevel + 5)))
        : 3;
      
      return (
        <motion.div 
          key={i} 
          className={`${joined && isPlaying && audioEnabled ? 'bg-green-500' : 'bg-gray-300'} rounded-full mx-px`}
          style={{ 
            height: `${height}px`,
            width: '2px'
          }}
          animate={{ 
            height: `${height}px`,
          }}
          transition={{ duration: 0.1 }}
        />
      );
    });
  };
  
  // Quitter la conf√©rence et revenir √† l'accueil
  const leaveConference = () => {
    // Fermer la connexion WebRTC
    if (peerConnectionRef.current) {
      peerConnectionRef.current.close();
      peerConnectionRef.current = null;
    }
    
    // Arr√™ter le flux distant
    if (remoteStreamRef.current) {
      remoteStreamRef.current.getTracks().forEach(track => track.stop());
      remoteStreamRef.current = null;
    }
    
    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }
    
    if (audioLevelIntervalRef.current) {
      clearInterval(audioLevelIntervalRef.current);
      audioLevelIntervalRef.current = null;
    }
    
    if (timeUpdateIntervalRef.current) {
      clearInterval(timeUpdateIntervalRef.current);
      timeUpdateIntervalRef.current = null;
    }
    
    if (liveTimerRef.current) {
      clearInterval(liveTimerRef.current);
      liveTimerRef.current = null;
    }
    
    setJoined(false);
    setShowEndedAlert(false);
    navigate('/conference');
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header */}
      <header className="bg-gradient-to-r from-blue-500 to-blue-600 shadow-lg">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <motion.div 
            className="flex items-center"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
          >
            {joined ? (
              <button 
                className="mr-3 text-white/80 hover:text-white transition-colors"
                onClick={() => setJoined(false)}
              >
                <ChevronLeft size={24} />
              </button>
            ) : (
              <Link to="/conference">
                <button className="mr-3 text-white/80 hover:text-white transition-colors">
                  <ChevronLeft size={24} />
                </button>
              </Link>
            )}
            <div className="flex items-center">
              <motion.div 
                className="bg-white/20 text-white p-2 rounded-full flex items-center"
                whileHover={{ scale: 1.1, rotate: 10 }}
                transition={{ type: "spring", stiffness: 400, damping: 10 }}
              >
                <Globe size={24} />
              </motion.div>
              <h1 className="text-xl font-bold ml-2 text-white">
                {joined ? conferenceInfo?.title || 'Conf√©rence' : 'Rejoindre une conf√©rence'}
              </h1>
            </div>
          </motion.div>
          {joined && (
            <div className="flex items-center space-x-2">
              <motion.div 
                className="flex h-6 items-center bg-white/10 px-3 py-4 rounded-full"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.5 }}
              >
                {generateWaveform()}
              </motion.div>
              <motion.button
                className="p-2 text-white/80 hover:text-white bg-white/10 rounded-full"
                onClick={() => setShowParticipantsModal(true)}
                whileHover={{ scale: 1.1 }}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.5, delay: 0.1 }}
              >
                <Users size={18} />
              </motion.button>
              <motion.button
                className="p-2 text-white/80 hover:text-white bg-white/10 rounded-full"
                onClick={() => setShowChat(!showChat)}
                whileHover={{ scale: 1.1 }}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
              >
                <MessageSquare size={18} />
              </motion.button>
            </div>
          )}
        </div>
      </header>
      
      <main className={`flex-grow max-w-6xl mx-auto px-4 py-8 ${showChat && joined ? 'lg:pr-80' : ''}`}>
        {/* Alerte de fin de conf√©rence */}
        {showEndedAlert && (
          <motion.div 
            className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-6 flex justify-between items-center"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <div className="flex items-center">
              <AlertTriangle size={24} className="mr-2 flex-shrink-0" />
              <p>{endedMessage}</p>
            </div>
            <div className="flex gap-2">
              <button 
                onClick={leaveConference}
                className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg"
              >
                Quitter
              </button>
            </div>
          </motion.div>
        )}
        
        {!joined ? (
          // √âcran de connexion
          <div className="max-w-md mx-auto">
            {step === 1 && (
              <motion.div 
                className="bg-white rounded-lg shadow-md overflow-hidden"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <div className="bg-gradient-to-r from-blue-50 to-blue-100 px-4 py-3 border-b">
                  <h2 className="font-semibold text-blue-700">Rejoindre une conf√©rence</h2>
                </div>
                <div className="p-6">
                  <p className="text-gray-600 mb-6">
                    Entrez l'identifiant de la conf√©rence ou scannez le QR code fourni par l'organisateur.
                  </p>
                  
                  <div className="mb-6">
                    <label htmlFor="conference-id" className="block text-sm font-medium text-gray-700 mb-1">
                      Identifiant de la conf√©rence
                    </label>
                    <div className="flex">
                      <input 
                        type="text" 
                        id="conference-id" 
                        value={conferenceId} 
                        onChange={(e) => setConferenceId(e.target.value)} 
                        placeholder="Ex: CN-1234-ABCD"
                        className="flex-1 p-3 border border-gray-300 rounded-l-lg focus:ring-blue-500 focus:border-blue-500"
                      />
                      <button 
                        className="bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-r-lg transition-colors flex items-center"
                        onClick={startQrScanner}
                      >
                        <QrCode size={20} />
                      </button>
                    </div>
                    {error && (
                      <p className="mt-2 text-sm text-red-600">{error}</p>
                    )}
                  </div>
                  
                  <div className="flex justify-end">
                    <motion.button 
                      className={`px-6 py-3 bg-blue-500 text-white rounded-lg font-medium shadow-md hover:bg-blue-600 transition-colors flex items-center ${
                        !conferenceId || isLoading || error ? 'opacity-50 cursor-not-allowed' : ''
                      }`}
                      onClick={() => checkConference(conferenceId)}
                      disabled={!conferenceId || isLoading || error}
                      whileHover={{ scale: conferenceId && !isLoading && !error ? 1.05 : 1 }}
                      whileTap={{ scale: conferenceId && !isLoading && !error ? 0.95 : 1 }}
                    >
                      {isLoading ? (
                        <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                      ) : (
                        <ArrowRight size={18} className="mr-2" />
                      )}
                      Continuer
                    </motion.button>
                  </div>
                </div>
              </motion.div>
            )}
            
            {step === 2 && conferenceInfo && (
              <motion.div 
                className="bg-white rounded-lg shadow-md overflow-hidden"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <div className="bg-gradient-to-r from-blue-50 to-blue-100 px-4 py-3 border-b">
                  <h2 className="font-semibold text-blue-700">Rejoindre la conf√©rence</h2>
                </div>
                <div className="p-6">
                  <div className="mb-6 bg-blue-50 p-4 rounded-lg">
                    <h3 className="font-medium text-lg text-gray-800 mb-1">{conferenceInfo.title}</h3>
                    <p className="text-gray-600 text-sm mb-2">ID: {conferenceInfo.id}</p>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">Langue source: <span className="font-medium">{conferenceInfo.sourceLanguage}</span></span>
                      <span className="text-gray-600">{conferenceInfo.participantsCount || 0} participants</span>
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <label htmlFor="user-name" className="block text-sm font-medium text-gray-700 mb-1">
                      Votre nom
                    </label>
                    <input 
                      type="text" 
                      id="user-name" 
                      value={userName} 
                      onChange={(e) => setUserName(e.target.value)} 
                      placeholder="Ex: Jean Dupont"
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Ce nom sera affich√© aux autres participants
                    </p>
                  </div>
                  
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Choisissez votre langue d'√©coute
                    </label>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                      {availableLanguages.map((lang) => (
                        <motion.button
                          key={lang}
                          className={`p-3 rounded-lg text-left flex items-center border ${
                            selectedLanguage === lang 
                              ? 'bg-blue-50 border-blue-300 text-blue-800' 
                              : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                          }`}
                          onClick={() => setSelectedLanguage(lang)}
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                        >
                          <Radio size={18} className={selectedLanguage === lang ? 'text-blue-500' : 'text-gray-400'} />
                          <span className="ml-2">{lang}</span>
                        </motion.button>
                      ))}
                    </div>
                    {availableLanguages.length === 0 && (
                      <p className="text-amber-600 text-sm mt-2">
                        Aucune langue disponible pour cette conf√©rence.
                      </p>
                    )}
                  </div>
                  
                  <div className="flex justify-between">
                    <motion.button 
                      className="px-4 py-2 text-gray-600 hover:text-gray-800 flex items-center"
                      onClick={() => setStep(1)}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <ChevronLeft size={18} className="mr-1" />
                      Retour
                    </motion.button>
                    
                    <motion.button 
                      className={`px-6 py-3 bg-blue-500 text-white rounded-lg font-medium shadow-md hover:bg-blue-600 transition-colors flex items-center ${
                        !selectedLanguage || !userName.trim() || isLoading ? 'opacity-50 cursor-not-allowed' : ''
                      }`}
                      onClick={joinConference}
                      disabled={!selectedLanguage || !userName.trim() || isLoading}
                      whileHover={{ scale: selectedLanguage && userName.trim() && !isLoading ? 1.05 : 1 }}
                      whileTap={{ scale: selectedLanguage && userName.trim() && !isLoading ? 0.95 : 1 }}
                    >
                      {isLoading ? (
                        <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                      ) : (
                        <Headphones size={18} className="mr-2" />
                      )}
                      Rejoindre
                    </motion.button>
                  </div>
                </div>
              </motion.div>
            )}
          </div>
        ) : (
          // √âcran d'√©coute
          <div className="grid grid-cols-1 lg:grid-cols-7 gap-8">
            {/* Colonne principale - Vid√©o et Contr√¥les */}
            <div className="lg:col-span-5">
              {/* Affichage vid√©o */}
              {videoEnabled ? (
                <motion.div 
                  className="bg-black rounded-lg overflow-hidden mb-6 shadow-md aspect-video relative"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  {isBuffering && (
                    <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-70 z-10">
                      <div className="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mr-3"></div>
                      <span className="text-white">Chargement de la vid√©o...</span>
                    </div>
                  )}
                  <video 
                    ref={setPresenterVideoRef}
                    className="w-full h-full object-contain bg-black" 
                    style={{ minHeight: '300px' }}
                    playsInline
                    autoPlay
                    muted={false}
                    controls={false}
                    onLoadedMetadata={() => console.log("üîµ M√©tadonn√©es vid√©o charg√©es")}
                    onLoadedData={() => console.log("üîµ Donn√©es vid√©o charg√©es et pr√™tes √† √™tre lues")}
                    onCanPlay={() => {
                      console.log("üîµ La vid√©o peut √™tre lue");
                      setIsBuffering(false);
                      // Si l'√©tat actuel est en lecture, essayez de d√©marrer la vid√©o proprement
                      if (isPlaying && presenterVideoRef.current) {
                        presenterVideoRef.current.play().catch(err => 
                          console.warn("Impossible de d√©marrer automatiquement la vid√©o:", err)
                        );
                      }
                    }}
                    onPlaying={() => {
                      console.log("üü¢ Lecture vid√©o d√©marr√©e");
                      setIsBuffering(false);
                    }}
                    onWaiting={() => {
                      console.log("‚ö†Ô∏è Mise en m√©moire tampon de la vid√©o...");
                      setIsBuffering(true);
                    }}
                    onError={(e) => console.error("‚ùå Erreur vid√©o:", e.target.error)}
                  />
                  
                  {/* Afficher le mode de lecture (live ou replay) */}
                  <div className="absolute top-4 right-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-full text-sm flex items-center">
                    {timelineMode === 'live' ? (
                      <>
                        <span className="w-2 h-2 bg-red-500 rounded-full mr-2 animate-pulse"></span>
                        Direct
                      </>
                    ) : (
                      <>
                        <Clock size={14} className="mr-2" />
                        Replay
                      </>
                    )}
                  </div>
                </motion.div>
              ) : (
                <motion.div 
                  className="bg-gray-800 rounded-lg overflow-hidden mb-6 shadow-md aspect-video flex items-center justify-center"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  <div className="text-center text-gray-400">
                    <VideoOff size={48} className="mx-auto mb-2 opacity-50" />
                    <p className="text-lg">
                      {videoDisabledByPresenter 
                        ? "La cam√©ra du pr√©sentateur est d√©sactiv√©e" 
                        : "Vid√©o non disponible"}
                    </p>
                  </div>
                </motion.div>
              )}
              
              {/* Contr√¥les audio */}
              <motion.div 
                className="bg-white rounded-lg shadow-md overflow-hidden mb-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <div className="bg-gradient-to-r from-green-50 to-green-100 px-4 py-3 border-b flex justify-between items-center">
                  <div className="flex items-center">
                    <h2 className="font-semibold text-green-700">√âcoute</h2>
                    {!audioEnabled && (
                      <span className="ml-2 text-xs px-2 py-1 bg-red-100 text-red-700 rounded-full flex items-center">
                        <MicOff size={12} className="mr-1" />
                        Microphone du pr√©sentateur d√©sactiv√©
                      </span>
                    )}
                  </div>
                  <div className="flex items-center text-green-700 text-sm">
                    <button 
                      onClick={toggleTimelineMode}
                      className={`px-2 py-1 rounded-full mr-2 text-xs ${
                        timelineMode === 'live' 
                          ? 'bg-red-100 text-red-700' 
                          : 'bg-blue-100 text-blue-700'
                      }`}
                    >
                      {timelineMode === 'live' ? 'Direct' : 'Replay'}
                    </button>
                    <Clock size={14} className="mr-1" />
                    {formatTime(currentTime)} / {formatTime(maxLiveTime)}
                  </div>
                </div>
                <div className="p-6">
                  <div className="mb-6">
                    <div className="flex justify-between text-sm text-gray-500 mb-2">
                      <span>
                        Source: <span className="font-medium">{conferenceInfo?.sourceLanguage}</span>
                      </span>
                      <span>
                        √âcoute: <span className="font-medium text-green-600">{selectedLanguage}</span>
                      </span>
                    </div>
                    
                    <div className="bg-green-50 p-4 rounded-lg mb-4">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="font-medium text-green-800">
                          {isPlaying 
                            ? (audioEnabled ? 'Traduction en direct' : 'En attente d\'audio')
                            : 'En pause'}
                        </h3>
                        <div className="flex items-center">
                          <Volume2 size={16} className="text-green-700 mr-1" />
                          <div className="relative w-20 h-4 bg-green-100 rounded-full overflow-hidden">
                            <motion.div 
                              className="absolute top-0 left-0 h-full bg-green-500"
                              style={{ width: `${(audioEnabled ? audioLevel * 100 : 0)}%` }}
                            />
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-center">
                        <motion.div 
                          className="rounded-full bg-white p-3 shadow-lg"
                          animate={{ 
                            scale: isPlaying && audioEnabled ? [1, 1.05, 1] : 1,
                            opacity: isPlaying && audioEnabled ? [0.9, 1, 0.9] : 0.9
                          }}
                          transition={{ 
                            repeat: isPlaying && audioEnabled ? Infinity : 0,
                            duration: 2
                          }}
                        >
                          <Headphones size={32} className={`${isPlaying && audioEnabled ? 'text-green-500' : 'text-gray-400'}`} />
                        </motion.div>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <input 
                        type="range" 
                        min="0" 
                        max="100" 
                        value={((currentTime / (maxLiveTime || 1)) * 100) || 0} 
                        onChange={handleSeek}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-green-500"
                        disabled={showEndedAlert || (timelineMode === 'live')}
                      />
                      <div className="flex justify-between text-xs text-gray-500 mt-1">
                        <span>00:00</span>
                        <span>{formatTime(maxLiveTime)}</span>
                      </div>
                    </div>
                    
                    <div className="flex justify-center space-x-4">
                      <motion.button 
                        className={`w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center text-gray-600 hover:bg-gray-200 ${showEndedAlert ? 'opacity-50 cursor-not-allowed' : ''}`}
                        onClick={() => seekAudio(-10)}
                        whileHover={{ scale: showEndedAlert ? 1 : 1.1 }}
                        whileTap={{ scale: showEndedAlert ? 1 : 0.9 }}
                        disabled={showEndedAlert}
                      >
                        <Rewind size={20} />
                      </motion.button>
                      
                      <motion.button 
                        className={`w-16 h-16 ${isPlaying ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'} rounded-full flex items-center justify-center text-white shadow-lg ${showEndedAlert ? 'opacity-50 cursor-not-allowed' : ''}`}
                        onClick={togglePlayback}
                        whileHover={{ scale: showEndedAlert ? 1 : 1.1 }}
                        whileTap={{ scale: showEndedAlert ? 1 : 0.9 }}
                        disabled={showEndedAlert}
                      >
                        {isPlaying ? <Pause size={28} /> : <Play size={28} className="ml-1" />}
                      </motion.button>
                      
                      <motion.button 
                        className={`w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center text-gray-600 hover:bg-gray-200 ${(timelineMode === 'live' || showEndedAlert) ? 'opacity-50 cursor-not-allowed' : ''}`}
                        onClick={() => seekAudio(10)}
                        whileHover={{ scale: (timelineMode === 'live' || showEndedAlert) ? 1 : 1.1 }}
                        whileTap={{ scale: (timelineMode === 'live' || showEndedAlert) ? 1 : 0.9 }}
                        disabled={timelineMode === 'live' || showEndedAlert}
                      >
                        <FastForward size={20} />
                      </motion.button>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>
            
            {/* Colonne d'informations */}
            <div className="lg:col-span-2">
              <motion.div 
                className="bg-white rounded-lg shadow-md overflow-hidden mb-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.1 }}
              >
                <div className="bg-gradient-to-r from-blue-50 to-blue-100 px-4 py-3 border-b flex justify-between items-center">
                  <h2 className="font-semibold text-blue-700">Informations</h2>
                  <button 
                    className="text-blue-700 text-sm font-medium hover:text-blue-800"
                    onClick={() => setShowConferenceSummary(true)}
                  >
                    Voir le r√©sum√©
                  </button>
                </div>
                <div className="p-6">
                  <dl className="space-y-4">
                    <div className="grid grid-cols-3 gap-4">
                      <dt className="text-sm font-medium text-gray-500">Titre</dt>
                      <dd className="text-sm text-gray-900 col-span-2">{conferenceInfo?.title}</dd>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                      <dt className="text-sm font-medium text-gray-500">Identifiant</dt>
                      <dd className="text-sm text-gray-900 col-span-2">{conferenceInfo?.id}</dd>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                      <dt className="text-sm font-medium text-gray-500">Langue source</dt>
                      <dd className="text-sm text-gray-900 col-span-2">{conferenceInfo?.sourceLanguage}</dd>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                      <dt className="text-sm font-medium text-gray-500">Votre langue d'√©coute</dt>
                      <dd className="text-sm text-green-600 font-medium col-span-2">{selectedLanguage}</dd>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                      <dt className="text-sm font-medium text-gray-500">Autres langues disponibles</dt>
                      <dd className="text-sm text-gray-900 col-span-2">
                        <div className="flex flex-wrap gap-2">
                          {availableLanguages
                            .filter(lang => lang !== selectedLanguage)
                            .map(lang => (
                              <span key={lang} className="bg-gray-100 px-2 py-1 rounded-md text-xs">
                                {lang}
                              </span>
                            ))
                          }
                        </div>
                      </dd>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                      <dt className="text-sm font-medium text-gray-500">Participants</dt>
                      <dd className="text-sm text-gray-900 col-span-2 flex items-center">
                        {participantsList.length}
                        <button 
                          className="ml-2 text-blue-500 text-xs hover:underline"
                          onClick={() => setShowParticipantsModal(true)}
                        >
                          (Voir la liste)
                        </button>
                      </dd>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                      <dt className="text-sm font-medium text-gray-500">Mode de lecture</dt>
                      <dd className="text-sm text-gray-900 col-span-2 flex items-center">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          timelineMode === 'live' 
                            ? 'bg-red-100 text-red-700' 
                            : 'bg-blue-100 text-blue-700'
                        }`}>
                          {timelineMode === 'live' ? 'Direct' : 'Replay'}
                        </span>
                        <button
                          className="ml-2 text-blue-500 text-xs hover:underline"
                          onClick={toggleTimelineMode}
                          disabled={showEndedAlert}
                        >
                          {timelineMode === 'live' ? 'Basculer en mode replay' : 'Retourner en direct'}
                        </button>
                      </dd>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                      <dt className="text-sm font-medium text-gray-500">Heure de d√©but</dt>
                      <dd className="text-sm text-gray-900 col-span-2">
                        {conferenceInfo?.startTime ? new Date(conferenceInfo.startTime).toLocaleTimeString() : '-'}
                      </dd>
                    </div>
                  </dl>
                  
                  <div className="mt-6 pt-4 border-t flex gap-2">
                    {!showEndedAlert ? (
                      <>
                        <button 
                          className="flex-1 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors"
                          onClick={() => setJoined(false)}
                        >
                          Changer de langue
                        </button>
                        <button 
                          className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                          onClick={() => setShowChat(!showChat)}
                        >
                          {showChat ? "Masquer le chat" : "Afficher le chat"}
                        </button>
                      </>
                    ) : (
                      <button 
                        className="w-full px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                        onClick={leaveConference}
                      >
                        Quitter la conf√©rence
                      </button>
                    )}
                  </div>
                </div>
              </motion.div>
            </div>
          </div>
        )}
      </main>
      {/* Chat Sidebar */}
     {showChat && joined && (
       <motion.div 
         className="fixed inset-y-0 right-0 w-80 bg-white shadow-xl z-20 flex flex-col"
         initial={{ x: 300, opacity: 0 }}
         animate={{ x: 0, opacity: 1 }}
         exit={{ x: 300, opacity: 0 }}
         transition={{ type: "spring", stiffness: 300, damping: 30 }}
       >
         <div className="bg-blue-500 p-4 text-white flex justify-between items-center">
           <h3 className="font-bold">Chat de la conf√©rence</h3>
           <button 
             className="text-white/80 hover:text-white"
             onClick={() => setShowChat(false)}
           >
             <X size={20} />
           </button>
         </div>
         
         <div className="flex-1 overflow-y-auto p-4">
           {messages.length === 0 ? (
             <div className="text-center text-gray-500 py-8">
               <MessageSquare size={40} className="mx-auto mb-2 opacity-20" />
               <p>Les messages de la conf√©rence s'afficheront ici</p>
               <p className="text-xs mt-2">Tous les messages sont automatiquement traduits dans votre langue</p>
             </div>
           ) : (
             messages.map(message => (
               <div key={message.id} className={`mb-4 ${message.senderId === participantId ? 'text-right' : ''}`}>
                 <div className={`inline-block max-w-[85%] rounded-lg p-3 ${
                   message.senderId === participantId 
                     ? 'bg-blue-100 text-blue-800' 
                     : 'bg-gray-100 text-gray-800'
                 }`}>
                   <div className="text-xs text-gray-500 mb-1 flex justify-between">
                     <span>{message.senderName}</span>
                     <span className="ml-2">{message.originalLanguage}</span>
                   </div>
                   <p className="text-sm">{message.text}</p>
                   <div className="text-xs text-gray-500 mt-1 text-right">
                     {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                   </div>
                 </div>
               </div>
             ))
           )}
           <div ref={chatEndRef} />
         </div>
         
         <div className="p-4 border-t">
           <div className="flex">
             <input 
               type="text" 
               value={newMessage} 
               onChange={(e) => setNewMessage(e.target.value)} 
               placeholder="√âcrivez un message..."
               className="flex-1 p-2 border border-gray-300 rounded-l-lg focus:ring-blue-500 focus:border-blue-500"
               onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
               disabled={showEndedAlert}
             />
             <button 
               className={`bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-r-lg transition-colors ${showEndedAlert ? 'opacity-50 cursor-not-allowed' : ''}`}
               onClick={sendMessage}
               disabled={showEndedAlert}
             >
               <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                 <path fillRule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clipRule="evenodd" />
               </svg>
             </button>
           </div>
           <p className="text-xs text-gray-500 mt-1">
             {showEndedAlert 
               ? "Le chat est d√©sactiv√© car la conf√©rence a √©t√© termin√©e" 
               : `Vous √©crivez en ${selectedLanguage}. Les autres participants verront votre message dans leur langue.`
             }
           </p>
         </div>
       </motion.div>
     )}
     
     {/* QR Scanner Modal */}
     {showQrScanner && (
       <motion.div 
         className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50"
         initial={{ opacity: 0 }}
         animate={{ opacity: 1 }}
         exit={{ opacity: 0 }}
       >
         <motion.div 
           className="bg-white rounded-xl overflow-hidden max-w-sm w-full mx-4"
           initial={{ scale: 0.9, y: 20 }}
           animate={{ scale: 1, y: 0 }}
           exit={{ scale: 0.9, y: 20 }}
         >
           <div className="p-4 bg-blue-500 text-white flex justify-between items-center">
             <h3 className="font-bold">Scanner le QR code</h3>
             <button 
               className="text-white/80 hover:text-white"
               onClick={stopQrScanner}
             >
               <X size={24} />
             </button>
           </div>
           
           <div className="p-4">
             <div className="aspect-square w-full bg-black relative overflow-hidden rounded-lg mb-4">
               <video 
                 ref={videoRef} 
                 className="absolute inset-0 w-full h-full object-cover"
                 playsInline
               />
               <div className="absolute inset-0 border-2 border-blue-500 rounded-lg z-10"></div>
               <motion.div 
                 className="absolute top-1/2 left-0 w-full h-1 bg-blue-500/50 z-20"
                 animate={{
                   y: [-100, 100, -100]
                 }}
                 transition={{
                   repeat: Infinity,
                   duration: 2,
                   ease: "linear"
                 }}
               />
             </div>
             
             <p className="text-gray-600 text-sm text-center mb-4">
               Centrez le QR code de la conf√©rence dans le cadre pour le scanner automatiquement.
             </p>
             
             <button 
               className="w-full px-4 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
               onClick={stopQrScanner}
             >
               Saisir l'identifiant manuellement
             </button>
           </div>
         </motion.div>
       </motion.div>
     )}
     
     {/* Modal pour liste des participants */}
     {showParticipantsModal && (
       <motion.div 
         className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
         initial={{ opacity: 0 }}
         animate={{ opacity: 1 }}
         exit={{ opacity: 0 }}
         onClick={() => setShowParticipantsModal(false)}
       >
         <motion.div 
           className="bg-white rounded-xl p-6 max-w-lg w-full"
           initial={{ scale: 0.9, y: 20 }}
           animate={{ scale: 1, y: 0 }}
           exit={{ scale: 0.9, y: 20 }}
           onClick={e => e.stopPropagation()}
         >
           <div className="flex justify-between items-center mb-4">
             <h3 className="text-xl font-bold">Participants ({participantsList.length})</h3>
             <button 
               className="text-gray-400 hover:text-gray-600"
               onClick={() => setShowParticipantsModal(false)}
             >
               <X size={24} />
             </button>
           </div>
           
           <div className="max-h-96 overflow-y-auto">
             {participantsList.length === 0 ? (
               <p className="text-center text-gray-500 py-8">
                 Aucun participant pour le moment
               </p>
             ) : (
               <ul className="divide-y divide-gray-100">
                 {participantsList.map(participant => (
                   <li key={participant.id} className="py-3 flex justify-between items-center">
                     <div>
                       <span className="font-medium">{participant.name}</span>
                       <p className="text-xs text-gray-500">
                         Rejoint √† {new Date(participant.joinTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                       </p>
                     </div>
                     <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                       {participant.language}
                     </span>
                   </li>
                 ))}
               </ul>
             )}
           </div>
           
           <div className="mt-4 pt-4 border-t text-center">
             <p className="text-sm text-gray-600">
               {participantsList.length} participants sont connect√©s √† cette conf√©rence
             </p>
           </div>
         </motion.div>
       </motion.div>
     )}
     
     {/* Modal pour le r√©sum√© de la conf√©rence */}
     {showConferenceSummary && (
       <motion.div 
         className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
         initial={{ opacity: 0 }}
         animate={{ opacity: 1 }}
         exit={{ opacity: 0 }}
         onClick={() => setShowConferenceSummary(false)}
       >
         <motion.div 
           className="bg-white rounded-xl p-6 max-w-2xl w-full"
           initial={{ scale: 0.9, y: 20 }}
           animate={{ scale: 1, y: 0 }}
           exit={{ scale: 0.9, y: 20 }}
           onClick={e => e.stopPropagation()}
         >
           <div className="flex justify-between items-center mb-4">
             <h3 className="text-xl font-bold">R√©sum√© de la conf√©rence</h3>
             <button 
               className="text-gray-400 hover:text-gray-600"
               onClick={() => setShowConferenceSummary(false)}
             >
               <X size={24} />
             </button>
           </div>
           
           <div className="bg-blue-50 p-6 rounded-lg mb-6">
             <pre className="whitespace-pre-wrap font-sans text-gray-800">{conferenceSummary}</pre>
           </div>
           
           <div className="flex justify-end gap-4">
             <button 
               className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
               onClick={() => setShowConferenceSummary(false)}
             >
               Fermer
             </button>
             <button 
               className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
               onClick={() => {
                 const element = document.createElement("a");
                 const file = new Blob([conferenceSummary], {type: 'text/plain'});
                 element.href = URL.createObjectURL(file);
                 element.download = `r√©sum√©-${conferenceInfo?.id}.txt`;
                 document.body.appendChild(element);
                 element.click();
               }}
             >
               T√©l√©charger
             </button>
           </div>
         </motion.div>
       </motion.div>
     )}
     
     {/* Audio element (cach√©) */}
     <audio ref={audioRef} className="hidden" />
     
     {/* Footer */}
     <footer className="bg-gray-800 text-white py-4 mt-auto">
       <div className="max-w-6xl mx-auto px-4">
         <div className="flex justify-between items-center">
           <div className="flex items-center">
             <div className="bg-blue-500 text-white p-2 rounded-full">
               <Globe size={16} />
             </div>
             <span className="text-sm font-bold ml-2">VoiceTranslate</span>
           </div>
           <p className="text-xs text-gray-400">
             &copy; 2025 VoiceTranslate - Tous droits r√©serv√©s
           </p>
         </div>
       </div>
     </footer>
   </div>
 );
};

export default ConferenceJoinScreen;